import streamlit as st
from graphviz import Digraph
from agents import run_agent_system
import json

def create_agent_interaction_graph(agent_state: dict) -> Digraph:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    dot = Digraph()
    dot.attr(rankdir='TB')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
    dot.attr('node', shape='box', style='filled', fontname='Arial')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    messages = agent_state.get('messages', [])
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª
    dot.node('user', 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', fillcolor='lightblue')
    
    # –£–∑–ª—ã –∞–≥–µ–Ω—Ç–æ–≤
    coordinator_color = 'lightgreen'
    agent_colors = {
        'time_agent': 'lightyellow',
        'research_agent': 'lightcoral', 
        'math_agent': 'lightcyan',
        'translation_agent': 'lightpink',
        'general_agent': 'lightgray'
    }
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    dot.node('coordinator', 'üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä', fillcolor=coordinator_color)
    dot.edge('user', 'coordinator')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    next_agent = agent_state.get('next_agent', 'general_agent')
    agent_name = next_agent.replace('_', ' ').title()
    agent_color = agent_colors.get(next_agent, 'lightgray')
    
    # –ê–≥–µ–Ω—Ç-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    dot.node('executor', f'ü§ñ {agent_name}', fillcolor=agent_color)
    dot.edge('coordinator', 'executor')
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    result = agent_state.get('result', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    dot.node('result', f'üìã –†–µ–∑—É–ª—å—Ç–∞—Ç\n{result[:50]}...', fillcolor='lightgreen')
    dot.edge('executor', 'result')
    
    return dot

def create_message_flow_graph(agent_state: dict) -> Digraph:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dot = Digraph()
    dot.attr(rankdir='LR')
    
    messages = agent_state.get('messages', [])
    
    for i, message in enumerate(messages):
        if hasattr(message, 'content'):
            content = message.content
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(content) > 100:
                content = content[:100] + "..."
            
            if hasattr(message, 'type') and message.type == 'human':
                dot.node(f'msg_{i}', f'üë§ {content}', 
                        shape='box', fillcolor='lightblue')
            else:
                dot.node(f'msg_{i}', f'ü§ñ {content}', 
                        shape='box', fillcolor='lightyellow')
            
            if i > 0:
                dot.edge(f'msg_{i-1}', f'msg_{i}')
    
    return dot

def display_agent_analytics(agent_state: dict):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        messages = agent_state.get('messages', [])
        agent_used = agent_state.get('next_agent', 'general_agent')
        
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π", len(messages))
        st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç", agent_used.replace('_', ' ').title())
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'execution_time' in agent_state:
            st.metric("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{agent_state['execution_time']:.2f}—Å")
    
    with col2:
        st.subheader("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_used = []
        if agent_used == 'time_agent':
            tools_used.append('get_current_time')
        elif agent_used == 'research_agent':
            tools_used.append('search_wikipedia')
        elif agent_used == 'math_agent':
            tools_used.append('calculate_math')
        elif agent_used == 'translation_agent':
            tools_used.append('translate_text')
        
        for tool in tools_used:
            st.write(f"‚Ä¢ {tool}")

def main():
    st.set_page_config(
        page_title="–°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π",
        page_icon="ü§ñ",
        layout="wide"
    )
    
    st.title("ü§ñ –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    with st.sidebar:
        st.header("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        examples = [
            "–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
            "–ü–æ—Å—á–∏—Ç–∞–π 15 + 27",
            "–ü–µ—Ä–µ–≤–µ–¥–∏ '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
        ]
        
        for example in examples:
            if st.button(example, key=example):
                st.session_state.user_input = example
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üí¨ –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        user_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            value=st.session_state.get('user_input', ''),
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏?"
        )
        
        if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
            if user_input.strip():
                with st.spinner("–ê–≥–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å..."):
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
                    result = run_agent_system(user_input)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                    st.session_state.last_result = result
                    st.session_state.user_input = user_input
                    
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
    
    with col2:
        st.subheader("üìà –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        if 'last_result' in st.session_state:
            result = st.session_state.last_result
            agent_used = result.get('next_agent', 'general_agent')
            st.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {agent_used.replace('_', ' ').title()}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'last_result' in st.session_state:
        st.markdown("---")
        result = st.session_state.last_result
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç", 
            "üîÑ –ì—Ä–∞—Ñ –∞–≥–µ–Ω—Ç–æ–≤", 
            "üí¨ –ü–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        ])
        
        with tab1:
            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            st.write(result.get('result', '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'))
            
            st.subheader("üìù –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
            messages = result.get('messages', [])
            for i, msg in enumerate(messages):
                if hasattr(msg, 'content'):
                    if hasattr(msg, 'type') and msg.type == 'human':
                        st.write(f"**üë§ –í—ã:** {msg.content}")
                    else:
                        st.write(f"**ü§ñ –ê–≥–µ–Ω—Ç:** {msg.content}")
                    st.markdown("---")
        
        with tab2:
            st.subheader("üîÑ –ì—Ä–∞—Ñ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
            graph = create_agent_interaction_graph(result)
            st.graphviz_chart(graph)
        
        with tab3:
            st.subheader("üí¨ –ü–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
            flow_graph = create_message_flow_graph(result)
            st.graphviz_chart(flow_graph)
        
        with tab4:
            display_agent_analytics(result)
            
            # JSON –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            with st.expander("üîß JSON –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"):
                st.json(result)

if __name__ == "__main__":
    main() 